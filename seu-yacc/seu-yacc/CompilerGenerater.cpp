#include "stdafx.h"
#include "CompilerGenerater.h"
int CompilerGenerater::generate(const string& tplPath, const string& outPath) {
	FILE* outFile = fopen(outPath.c_str(), "w");
	
	ifstream tplfile(tplPath);
	string stpl((istreambuf_iterator<char>(tplfile)), istreambuf_iterator<char>());
	const char *tpl = stpl.c_str();
	string lrTable;

	lrTable += "int action[][";
	lrTable += to_string(builder.lrTable[0].size());
	lrTable+="] = {\n";
	for (size_t i = 0; i < builder.lrTable.size(); i++) {
		lrTable += "{";
		for (size_t j = 0; j < builder.lrTable[i].size(); j++) {
			lrTable += to_string((int)builder.lrTable[i][j].action);
			lrTable += " ,";
		}
		lrTable += "},\n";
	}
	lrTable += "};\n";
	lrTable += "int target[][";
	lrTable += to_string(builder.lrTable[0].size());
	lrTable += "] = {\n";
	for (int i = 0; i < (int)builder.lrTable.size(); i++) {
		lrTable += "{";
		for (int j = 0; j < (int)builder.lrTable[i].size(); j++) {
			lrTable += to_string(builder.lrTable[i][j].target);
			lrTable += " ,";
		}
		lrTable += "},\n";
	}
	lrTable += "};\n";
	string productions;
	auto &productionManager = builder.productionManager;
	productions += "int productions[][10]={\n";
	for (auto& pro : productionManager.productions) {
		//[id,left,num,right....]
		productions += "{";
		productions += to_string(pro.first);
		productions += ",";
		productions += pro.second.left.name + ",";
		productions += to_string(pro.second.right.size()) + ",";
		for (const auto& r : pro.second.right) {
			productions += r.name + ",";
		}
		productions += "}\n";
	}
	productions += "};\n";
	fprintf(outFile, tpl, reader.userHeader.c_str(), lrTable.c_str(), productions.c_str(), reader.userCode.c_str());
	fclose(outFile);
	return 0;
}
int CompilerGenerater::generateTableH(const string& outPath) {
	ofstream stream(outPath);
	stream << "//auto generated by seu-yacc\n";
	stream << "#ifndef _TABLE_H\n";
	stream << "#define _TABLE_H\n\n\n";
	for (auto& token : reader.tokenManager.tokens) {
		stream << "#define " << token.first << " " << token.second << '\n';
	}
	stream << "\n#endif\n";
	return 0;
}
